..  documentation: tasks

    Copyright ⓒ  2015 Jürgen Hermann

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 2 as
    published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

    The full LICENSE file and source are available at
        https://github.com/jhermann/rituals
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Tasks Reference
===============

Please make sure you also read the section on :ref:`task-namespaces`.


-----------------------------------------------------------------------------
Fundamental Tasks
-----------------------------------------------------------------------------

Getting Help
^^^^^^^^^^^^

``help`` is the default task in the root namespace, so that just calling ``inv``
gives a reasonable response. It combines the global help (``inv -h``) and the
task listing (``inv -l``).


Project Cleanup
^^^^^^^^^^^^^^^

The ``clean`` task gets rid of various groups of generated files,
selectable by options. These options are::

    -a, --all        The same as --backups --bytecode --dist --docs
    -b, --backups    Also clean '*~' files etc.
    -d, --docs       Also clean the documentation build area
    -e, --extra      Any extra patterns, space-separated and possibly quoted
    -i, --dist       Also clean the 'dist' dir
    -t, --tox        Include '.tox' directory
    -v, --venv       Include an existing virtualenv (in '.' or in '.venv')
    -y, --bytecode   Also clean '.pyc', '.pyo', and package metadata

Note that ``--all`` is selective and only cleans out ‘cheap’ files;
it especially excludes a local virtualenv that carries state (installed packages)
you might not have recorded safely in requirements files yet, and the
tree generated by ``tox`` that can take a while to reproduce.

The ``--extra`` options allows you to add any custom glob patterns to clean out.


Building the Project
^^^^^^^^^^^^^^^^^^^^

Invoking ``build`` just delegates to ``setup.py`` right now.
In the future, automatic detection of other project components
like a Maven POM or Javascript build files might trigger additional build tools.

You can also include the ``docs`` task by adding the ``--docs`` option.


-----------------------------------------------------------------------------
Documentation Tasks
-----------------------------------------------------------------------------

.. _doc-sphinx:

Building Sphinx Documentation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Rituals* provides automatic process management of a ``sphinx-autobuild``
daemon, which means you easily get a live-reload preview in your browser.
To start the build watchdog, use ``inv docs -w -b``.
The ``-b`` means to open a new browser tab,
after the server process is ready.
To kill the server, call the ``inv docs -k`` command.
You can check on the status of a running daemon with ``inv docs -s``.

Note that sometimes you have to manually trigger a full rebuild via
``inv docs --clean``, especially when you make structural changes
(e.g. adding new chapters to the main toc-tree).
Your browser will change the view to an empty canvas, just
initiate a reload (``Ctrl-R``) when the build is done.
Typically this is needed when the sidebar TOC is out of sync, which happens
due to the optimizations in ``sphinx-autobuild`` that make it so responsive.



-----------------------------------------------------------------------------
Release Workflow
-----------------------------------------------------------------------------

.. _release-prep:

Preparing a Release
^^^^^^^^^^^^^^^^^^^

``release-prep`` performs QA checks, and switches to non-dev versioning.

**TODO**


.. _release-pex:

Building a PEX Distribution
^^^^^^^^^^^^^^^^^^^^^^^^^^^

**TODO**
