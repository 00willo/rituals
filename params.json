{"name":"rituals","tagline":"Project automation tasks for ‘Invoke’ that are needed again and again.","body":"![GINOSAJI](https://raw.githubusercontent.com/jhermann/rituals/master/static/img/symbol-200.png) … and again and again.\r\n\r\n [![Travis CI](https://api.travis-ci.org/jhermann/rituals.svg)](https://travis-ci.org/jhermann/rituals)\r\n [![GitHub Issues](https://img.shields.io/github/issues/jhermann/rituals.svg)](https://github.com/jhermann/rituals/issues)\r\n [![License](https://img.shields.io/pypi/l/rituals.svg)](https://github.com/jhermann/rituals/blob/master/LICENSE)\r\n [![Development Status](https://pypip.in/status/rituals/badge.svg)](https://pypi.python.org/pypi/rituals/)\r\n [![Latest Version](https://img.shields.io/pypi/v/rituals.svg)](https://pypi.python.org/pypi/rituals/)\r\n [![Download format](https://pypip.in/format/rituals/badge.svg)](https://pypi.python.org/pypi/rituals/)\r\n [![Downloads](https://img.shields.io/pypi/dw/rituals.svg)](https://pypi.python.org/pypi/rituals/)\r\n\r\n\r\n## Common Tasks\r\n\r\nThe following lists the common task implementations that the ``invoke_tasks`` module contains.\r\nSee the next section on how to integrate them into your `tasks.py`.\r\n\r\n* ``help`` –    Default task, when invoked with no task names.\r\n* ``clean`` –   Perform house-cleaning.\r\n* ``build`` –   Build the project.\r\n* ``test`` –    Perform standard unittests.\r\n* ``check`` –   Perform source code checks.\r\n* ``dist`` –    Distribute the project.\r\n* ``release-prep`` – Prepare for a release (perform QA checks, and switch to non-dev versioning).\r\n\r\nThe guiding principle for these tasks is to strictly separate\r\nlow-level tasks for building and installing (via ``setup.py``)\r\nfrom high-level convenience tasks a developer uses (via ``invoke``).\r\nInvoke tasks can use Setuptools ones as building blocks,\r\nbut never the other way 'round\r\n– this removes any bootstrapping headaches during package installations.\r\n\r\nUse ``inv -h ‹task›`` as usual to get details on the options of these tasks.\r\nLook at the [invoke_tasks](https://github.com/jhermann/rituals/blob/master/src/rituals/invoke_tasks.py) source\r\nif you want to know what these tasks do exactly.\r\n\r\n:bulb: | The easiest way to get a working project using `rituals` is the [py-generic-project](https://github.com/Springerle/py-generic-project) cookiecutter archetype. That way you have a working project skeleton within minutes that is fully equipped, with all aspects of building, testing, quality checks, continuous integration, documentation, and releasing covered.\r\n---- | :----\r\n\r\n\r\n## Usage\r\n\r\n### Add common tasks to your project's `task.py`\r\n\r\nAdd `rituals` to your `dev-requirements.txt` or a similar file,\r\nor add it to `setup_requires` in your `setup.py`.\r\nThen at the start of your `tasks.py`, use the following statement to define _all_ tasks that are considered standard:\r\n\r\n```py\r\nfrom rituals.invoke_tasks import *\r\n```\r\n\r\nOf course, you can also do more selective imports, or remove specific tasks from the standard set via `del`.\r\n\r\n:warning: | These tasks expect an importable `setup.py` that defines a `project` dict with the setup parameters, see [javaprops](https://github.com/Feed-The-Web/javaprops) and [py-generic-project](https://github.com/Springerle/py-generic-project) for examples.\r\n---- | :----\r\n\r\nTo refer to the current GitHub ``master`` branch, use a ``pip`` requirement like this:\r\n\r\n```\r\n-e git+https://github.com/jhermann/rituals.git#egg=rituals\r\n```\r\n\r\n\r\n### Change default project layout\r\n\r\nBy default, sources are expected in `src/‹packagename›` and tests in `src/tests`.\r\n\r\nYou can change this by calling one of the following functions, directly after the import from `rituals.invoke_tasks`.\r\n\r\n* `config.set_maven_layout()` – Changes locations to `src/main/python/‹packagename›` and `src/test/python`.\r\n* `config.set_flat_layout()` – Changes locations to `‹packagename›` and `tests`.\r\n\r\n## Contributing\r\n\r\nTo create a working directory for this project, call these commands:\r\n\r\n```sh\r\ngit clone \"https://github.com/jhermann/rituals.git\"\r\ncd rituals\r\n. .env # answer the prompt with (y)es\r\ninvoke build --docs\r\n```\r\n\r\nTo use the source in this working directory within another project,\r\nchange your current directory to _this_ project,\r\nthen call `bin/pip` from *that* project's virtualenv like so:\r\n\r\n    …/.venv/…/bin/pip install -e .\r\n\r\nSee [CONTRIBUTING.md](https://github.com/jhermann/rituals/blob/master/CONTRIBUTING.md) for more.\r\n\r\n\r\n## Releasing\r\n\r\nThis is the process of releasing  ``rituals`` itself,\r\nprojects that use it will have an identical to very similar sequence of commands.\r\n\r\n```sh\r\ninv release-prep\r\ninv dist --devpi # local release + tox testing\r\n\r\ngit push && git push --tags # … and wait for Travis CI to do its thing\r\n\r\ntwine upload -r pypi dist/*\r\n```\r\n\r\nIf you have any pending changes, staged or unstaged, you'll get an error like this:\r\n\r\n![uncommitted changes](https://raw.githubusercontent.com/jhermann/rituals/master/docs/_static/img/invoke-release-prep-changes.png)\r\n\r\n\r\n## Related Projects\r\n\r\n* [Springerle/py-generic-project](https://github.com/Springerle/py-generic-project)\r\n* [pyinvoke/invoke](https://github.com/pyinvoke/invoke)\r\n* [pyinvoke/invocations](https://github.com/pyinvoke/invocations) – A collection of reusable Invoke tasks and task modules.\r\n\r\n\r\n## Acknowledgements\r\n\r\n* Logo elements from [clker.com Free Clipart](http://www.clker.com/).\r\n* In case you wonder about the logo, [watch this](http://youtu.be/9VDvgL58h_Y).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}